apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: mysql
  {{- if or .Values.mysql.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.mysql.annotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.mysql.replicaCount }}
  podManagementPolicy: {{ .Values.podManagementPolicy | quote }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.mysql.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: mysql
  serviceName: {{ template "common.names.fullname" . }}
  {{- if .Values.mysql.updateStrategy }}
  updateStrategy: {{- toYaml .Values.mysql.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.mysql.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: mysql
    spec:
      {{- include "cloudcanal.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ template "cloudcanal.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.mysql.automountServiceAccountToken }}
      {{- if .Values.global.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.global.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.mysql.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.mysql.podAffinityPreset "component" "mysql" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.mysql.podAntiAffinityPreset "component" "mysql" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.mysql.nodeAffinityPreset.type "key" .Values.mysql.nodeAffinityPreset.key "values" .Values.mysql.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.mysql.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.mysql.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.priorityClassName }}
      priorityClassName: {{ .Values.mysql.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.mysql.schedulerName }}
      schedulerName: {{ .Values.mysql.schedulerName | quote }}
      {{- end }}
      {{- if .Values.mysql.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.mysql.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.mysql.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.mysql.terminationGracePeriodSeconds }}
      {{- end }}
      containers:
        - name: mysql
          image: {{ include "cloudcanal.mysql.image" . }}
          imagePullPolicy: {{ .Values.mysql.image.pullPolicy }}
          {{- if .Values.mysql.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.mysql.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.mysql.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.command "context" $) | nindent 12 }}
          {{- else }}
          command: ["sh", "-c", "mysqld"]
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.mysql.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.args "context" $) | nindent 12 }}
          {{- else }}
          args: ["--character-set-server=utf8mb4","--collation-server=utf8mb4_unicode_ci"]
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: foo
              value: bar
            {{- if .Values.mysql.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.mysql.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.mysql.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.mysql.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.mysql.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.mysql.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.mysql.resources }}
          resources: {{- toYaml .Values.mysql.resources | nindent 12 }}
          {{- else if ne .Values.mysql.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.mysql.resourcesPreset) | nindent 12 }}
          {{- end }}
          ports:
            - name: mysql
              containerPort: {{ .Values.mysql.containerPorts.mysql }}
            {{- if .Values.mysql.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.mysql.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.mysql.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.mysql.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.mysql.livenessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: 3306
          {{- end }}
          {{- if .Values.mysql.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.mysql.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.mysql.readinessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: 3306
          {{- end }}
          {{- if .Values.mysql.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.mysql.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.mysql.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: 3306
          {{- end }}
          {{- end }}
          {{- if .Values.mysql.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.mysql.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
              readOnly: true
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          {{- if .Values.mysql.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.mysql.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.mysql.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.mysql.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "common.names.fullname" .) .Values.persistence.existingClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.mysql.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.mysql.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if or .Values.persistence.annotations .Values.commonAnnotations }}
        {{- $claimAnnotations := include "common.tplvalues.merge" (dict "values" .Values.persistence.annotations .Values.commonAnnotations "context" .) | fromYaml }}
        annotations: {{- include "common.tplvalues.render" ( dict "value" $claimAnnotations "context" $ ) | nindent 10 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        labels: {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end }}
        {{- include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
  {{- end }}
