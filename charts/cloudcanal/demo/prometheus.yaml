apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: cloudcanal
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc-config
  namespace: cloudcanal
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: cloudcanal
data:
  prometheus.yml: |
    # 默认的全局配置
    global:
      scrape_interval:     15s # 采集间隔15s，默认为1min一次
      evaluation_interval: 15s # 计算规则的间隔15s默认为1min一次
      scrape_timeout: 10s # 采集超时时间，默认为10s
      external_labels:  # 当和其他外部系统交互时的标签，如远程存储、联邦集群时
        # prometheus: monitoring/k8s  # 如：prometheus-operator的配置
        # prometheus_replica: prometheus-k8s-1
    
    # Alertmanager的配置
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          # - 127.0.0.1:9093  # alertmanager的服务地址，如127.0.0.1:9093
      alert_relabel_configs: # 在抓取之前对任何目标及其标签进行修改。
      - separator: ;
        regex: prometheus_replica
        replacement: $1
        action: labeldrop
    
    # 一旦加载了报警规则文件，将按照evaluation_interval即15s一次进行计算，rule文件可以有多个
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"
    
    # scrape_configs为采集配置，包含至少一个job
    
    scrape_configs:
      # Prometheus的自身监控 将在采集到的时间序列数据上打上标签job=xx
      - job_name: 'prometheus'
        # 采集指标的默认路径为：/metrics，如 localhost:9090/metric
        # 协议默认为http
        static_configs:
        - targets: ['localhost:9090']
      ## example metric test
      - job_name: 'cloudcanal_prometheus'
        scrape_interval: 5s
        metrics_path: '/metrics'
        static_configs:
        - targets: ['console:8084']
      - job_name: 'cloudcanal_console'
        scrape_interval: 5s
        metrics_path: '/console/metrics/prometheus'
        static_configs:
        - targets: ['console:8111']
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cloudcanal-service: prometheus
  name: prometheus-outer
  namespace: cloudcanal
spec:
  type: NodePort
  ports:
    - name: "31900"
      port: 9090
      targetPort: 9090
      nodePort: 31900
  selector:
    cloudcanal-service: prometheus
---
apiVersion: v1
kind: Service
metadata:
  labels:
    cloudcanal-service: prometheus
  name: prometheus
  namespace: cloudcanal
spec:
  clusterIP: None
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    cloudcanal-service: prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    cloudcanal-service: prometheus
  name: prometheus
  namespace: cloudcanal
spec:
  replicas: 1
  selector:
    matchLabels:
      cloudcanal-service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cloudcanal-service: prometheus
    spec:
      containers:
        - image: clougence/cloudcanal-prometheus:${build_version}
          imagePullPolicy: IfNotPresent
          name: cloudcanal-prometheus
          ports:
            - containerPort: 9090
              hostPort: 9090
              protocol: TCP
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "1Gi"
              cpu: "1"
          volumeMounts:
            - mountPath: /prometheus
              name: cloudcanal-prometheus-volume
            - mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
              name: cloudcanal-prometheus-config
      restartPolicy: Always
      volumes:
        - name: cloudcanal-prometheus-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: cloudcanal-prometheus-config
          configMap:
            name: prometheus-config
            items:
              - key: prometheus.yml
                path: prometheus.yml
