## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## e.g:
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""
  mosquittoEnabled: true
  postgresqlEnabled: true
  ## Compatibility adaptations for Kubernetes platforms
  ##
  compatibility:
    ## Compatibility adaptations for Openshift
    ##
    openshift:
      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
      ##
      adaptSecurityContext: auto

## @section Common parameters
##

## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param namespaceOverride String to fully override common.names.namespace
##
namespaceOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Kubernetes cluster domain name
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []
## Diagnostic mode
## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
## @param diagnosticMode.command Command to override all containers in the chart release
## @param diagnosticMode.args Args to override all containers in the chart release
##
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

## Bitnami netmaker image
## ref: https://hub.docker.com/r/bitnami/%%IMAGE_NAME%%/tags/
## @param netmaker.image.registry [default: REGISTRY_NAME] netmaker image registry
## @param netmaker.image.repository [default: REPOSITORY_NAME/%%IMAGE_NAME%%] netmaker image repository
## @skip netmaker.image.tag netmaker image tag (immutable tags are recommended)
## @param netmaker.image.digest netmaker image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
## @param netmaker.image.pullPolicy netmaker image pull policy
## @param netmaker.image.pullSecrets netmaker image pull secrets
## @param netmaker.image.debug Enable netmaker image debug mode
##
image:
  registry: docker.io
  repository: bitnami/%%IMAGE_NAME%%
  tag: %%IMAGE_TAG%%
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  debug: false
## @param netmaker.replicaCount Number of netmaker replicas to deploy
##
replicaCount: 1
## @param netmaker.containerPorts.http netmaker HTTP container port
## @param netmaker.containerPorts.https netmaker HTTPS container port
##
containerPorts:
  http: 80
## Configure extra options for netmaker containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param netmaker.livenessProbe.enabled Enable livenessProbe on netmaker containers
## @param netmaker.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param netmaker.livenessProbe.periodSeconds Period seconds for livenessProbe
## @param netmaker.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param netmaker.livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param netmaker.livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
## @param netmaker.readinessProbe.enabled Enable readinessProbe on netmaker containers
## @param netmaker.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param netmaker.readinessProbe.periodSeconds Period seconds for readinessProbe
## @param netmaker.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param netmaker.readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param netmaker.readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
## @param netmaker.startupProbe.enabled Enable startupProbe on netmaker containers
## @param netmaker.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param netmaker.startupProbe.periodSeconds Period seconds for startupProbe
## @param netmaker.startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param netmaker.startupProbe.failureThreshold Failure threshold for startupProbe
## @param netmaker.startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
## @param netmaker.customLivenessProbe Custom livenessProbe that overrides the default one
##
customLivenessProbe: {}
## @param netmaker.customReadinessProbe Custom readinessProbe that overrides the default one
##
customReadinessProbe: {}
## @param netmaker.customStartupProbe Custom startupProbe that overrides the default one
##
customStartupProbe: {}
## netmaker resource requests and limits
## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## @param netmaker.resourcesPreset Set netmaker container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if netmaker.resources is set (netmaker.resources is recommended for production).
## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
##
resourcesPreset: none
## @param netmaker.resources Set netmaker container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi
##
resources: {}
## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param netmaker.podSecurityContext.enabled Enable netmaker pods' Security Context
## @param netmaker.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy for netmaker pods
## @param netmaker.podSecurityContext.sysctls Set kernel settings using the sysctl interface for netmaker pods
## @param netmaker.podSecurityContext.supplementalGroups Set filesystem extra groups for netmaker pods
## @param netmaker.podSecurityContext.fsGroup Set fsGroup in netmaker pods' Security Context
##
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
## Configure Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param netmaker.containerSecurityContext.enabled Enabled netmaker container' Security Context
## @param netmaker.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in netmaker container
## @param netmaker.containerSecurityContext.runAsUser Set runAsUser in netmaker container' Security Context
## @param netmaker.containerSecurityContext.runAsNonRoot Set runAsNonRoot in netmaker container' Security Context
## @param netmaker.containerSecurityContext.readOnlyRootFilesystem Set readOnlyRootFilesystem in netmaker container' Security Context
## @param netmaker.containerSecurityContext.privileged Set privileged in netmaker container' Security Context
## @param netmaker.containerSecurityContext.allowPrivilegeEscalation Set allowPrivilegeEscalation in netmaker container' Security Context
## @param netmaker.containerSecurityContext.capabilities.drop List of capabilities to be dropped in netmaker container
## @param netmaker.containerSecurityContext.seccompProfile.type Set seccomp profile in netmaker container
##
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  privileged: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

## @param netmaker.existingConfigmap The name of an existing ConfigMap with your custom configuration for netmaker
##
existingConfigmap:
## @param netmaker.command Override default netmaker container command (useful when using custom images)
##
command: []
## @param netmaker.args Override default netmaker container args (useful when using custom images)
##
args: []
## @param netmaker.automountServiceAccountToken Mount Service Account token in netmaker pods
##
automountServiceAccountToken: false
## @param netmaker.hostAliases netmaker pods host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param netmaker.daemonsetAnnotations Annotations for netmaker daemonset
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
daemonsetAnnotations: {}
## @param netmaker.deploymentAnnotations Annotations for netmaker deployment
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
deploymentAnnotations: {}
## @param netmaker.statefulsetAnnotations Annotations for netmaker statefulset
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
statefulsetAnnotations: {}
## @param netmaker.podLabels Extra labels for netmaker pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param netmaker.podAnnotations Annotations for netmaker pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param netmaker.podAffinityPreset Pod affinity preset. Ignored if `netmaker.affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param netmaker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `netmaker.affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node netmaker.affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param netmaker.nodeAffinityPreset.type Node affinity preset type. Ignored if `netmaker.affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param netmaker.nodeAffinityPreset.key Node label key to match. Ignored if `netmaker.affinity` is set
  ##
  key: ""
  ## @param netmaker.nodeAffinityPreset.values Node label values to match. Ignored if `netmaker.affinity` is set
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param netmaker.affinity Affinity for netmaker pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: `netmaker.podAffinityPreset`, `netmaker.podAntiAffinityPreset`, and `netmaker.nodeAffinityPreset` will be ignored when it's set
##
affinity: {}
## @param netmaker.nodeSelector Node labels for netmaker pods assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}
## @param netmaker.tolerations Tolerations for netmaker pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## ONLY FOR DEPLOYMENTS:
## @param netmaker.updateStrategy.type netmaker deployment strategy type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## ONLY FOR STATEFULSETS:
## @param netmaker.updateStrategy.type netmaker statefulset strategy type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  ## ONLY FOR DEPLOYMENTS:
  ## Can be set to RollingUpdate or Recreate
  ## ONLY FOR STATEFULSETS:
  ## Can be set to RollingUpdate or OnDelete
  ##
  type: RollingUpdate
## ONLY FOR STATEFULSETS:
## @param netmaker.podManagementPolicy Pod management policy for netmaker statefulset
## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
##
podManagementPolicy: OrderedReady
## @param netmaker.priorityClassName netmaker pods' priorityClassName
##
priorityClassName: ""
## @param netmaker.topologySpreadConstraints Topology Spread Constraints for netmaker pod assignment spread across your cluster among failure-domains
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
##
topologySpreadConstraints: []
## @param netmaker.schedulerName Name of the k8s scheduler (other than default) for netmaker pods
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param netmaker.terminationGracePeriodSeconds Seconds netmaker pods need to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
## @param netmaker.lifecycleHooks for netmaker containers to automate configuration before or after startup
##
lifecycleHooks: {}
## @param netmaker.extraEnvVars Array with extra environment variables to add to netmaker containers
## e.g:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars: []
## @param netmaker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for netmaker containers
##
extraEnvVarsCM: ""
## @param netmaker.extraEnvVarsSecret Name of existing Secret containing extra env vars for netmaker containers
##
extraEnvVarsSecret: ""
## @param netmaker.extraVolumes Optionally specify extra list of additional volumes for the netmaker pods
##
extraVolumes: []
## @param netmaker.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the netmaker containers
##
extraVolumeMounts: []
## @param netmaker.sidecars Add additional sidecar containers to the netmaker pods
## e.g:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []
## @param netmaker.initContainers Add additional init containers to the netmaker pods
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "hello world"']
##
initContainers: []

mosquitto:

postgresql:

## @section Traffic Exposure Parameters
##

## netmaker service parameters
##
service:
  ## @param service.type netmaker service type
  ##
  type: LoadBalancer
  ## @param service.ports.http netmaker service HTTP port
  ## @param service.ports.https netmaker service HTTPS port
  ##
  ports:
    http: 80
    https: 443
  ## Node ports to expose
  ## @param service.nodePorts.http Node port for HTTP
  ## @param service.nodePorts.https Node port for HTTPS
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    http: ""
    https: ""
  ## @param service.clusterIP netmaker service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP netmaker service Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP: ""
  ## @param service.loadBalancerSourceRanges netmaker service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy netmaker service external traffic policy
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for netmaker service
  ##
  annotations: {}
  ## @param service.extraPorts Extra ports to expose in netmaker service (normally used with the `sidecars` value)
  ##
  extraPorts: []
  ## @param service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}
## Network Policies
## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
##
networkPolicy:
  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  ##
  enabled: true
  ## @param networkPolicy.allowExternal Don't require server label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## server label will have network access to the ports server is listening
  ## on. When true, server will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true
  ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
  ##
  allowExternalEgress: true
  ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolice
  ## e.g:
  ## extraIngress:
  ##   - ports:
  ##       - port: 1234
  ##     from:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  extraIngress: []
  ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy (ignored if allowExternalEgress=true)
  ## e.g:
  ## extraEgress:
  ##   - ports:
  ##       - port: 1234
  ##     to:
  ##       - podSelector:
  ##           - matchLabels:
  ##               - role: frontend
  ##       - podSelector:
  ##           - matchExpressions:
  ##               - key: role
  ##                 operator: In
  ##                 values:
  ##                   - frontend
  ##
  extraEgress: []
  ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
  ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
  ##
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
## netmaker ingress parameters
## ref: http://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for netmaker
  ##
  enabled: false
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.hostname Default host for the ingress record
  ##
  hostname: %%COMPONENT_NAME%%.local
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  ##
  path: /
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: {}
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: %%COMPONENT_NAME%%.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
  ## e.g:
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls TLS configuration for additional hostname(s) to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## e.g:
  ## extraTls:
  ## - hosts:
  ##     - %%COMPONENT_NAME%%.local
  ##   secretName: %%COMPONENT_NAME%%.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets Custom TLS certificates as secrets
  ## NOTE: 'key' and 'certificate' are expected in PEM format
  ## NOTE: 'name' should line up with a 'secretName' set further up
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - name: %%COMPONENT_NAME%%.local-tls
  ##     key: |-
  ##       -----BEGIN RSA PRIVATE KEY-----
  ##       ...
  ##       -----END RSA PRIVATE KEY-----
  ##     certificate: |-
  ##       -----BEGIN CERTIFICATE-----
  ##       ...
  ##       -----END CERTIFICATE-----
  ##
  secrets: []
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: example.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: example-svc
  ##           port:
  ##             name: http
  ##
  extraRules: []
