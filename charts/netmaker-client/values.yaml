## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## e.g:
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []

## @section server parameters
##
register:
  name: ""
  token: ""
## @section netmaker parameters
## ref: https://docs.netmaker.io/server-installation.html
##

## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: netmaker-client
## @param namespaceOverride String to fully override common.names.namespace
##
namespaceOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Kubernetes cluster domain name
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []

## Bitnami netmaker image
## ref: https://hub.docker.com/r/bitnami/%%IMAGE_NAME%%/tags/
## @param netmaker.image.registry [default: REGISTRY_NAME] netmaker image registry
## @param netmaker.image.repository [default: REPOSITORY_NAME/%%IMAGE_NAME%%] netmaker image repository
## @skip netmaker.image.tag netmaker image tag (immutable tags are recommended)
## @param netmaker.image.digest netmaker image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
## @param netmaker.image.pullPolicy netmaker image pull policy
## @param netmaker.image.pullSecrets netmaker image pull secrets
## @param netmaker.image.debug Enable netmaker image debug mode
##
image:
  registry: docker.io
  repository: gravitl/netclient
  tag: latest
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  debug: true
## @param netmaker.replicaCount Number of netmaker replicas to deploy
##
replicaCount: 1
## @param netmaker.customLivenessProbe Custom livenessProbe that overrides the default one
##
customLivenessProbe: {}
## @param netmaker.customReadinessProbe Custom readinessProbe that overrides the default one
##
customReadinessProbe: {}
## @param netmaker.customStartupProbe Custom startupProbe that overrides the default one
##
customStartupProbe: {}
## netmaker resource requests and limits
## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## @param netmaker.resourcesPreset Set netmaker container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if netmaker.resources is set (netmaker.resources is recommended for production).
## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
##
resourcesPreset: none
## @param netmaker.resources Set netmaker container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi
##
resources: {}

## @param netmaker.existingConfigmap The name of an existing ConfigMap with your custom configuration for netmaker
##
existingConfigmap:
## @param netmaker.automountServiceAccountToken Mount Service Account token in netmaker pods
##
automountServiceAccountToken: false
## @param netmaker.hostAliases netmaker pods host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param netmaker.daemonsetAnnotations Annotations for netmaker daemonset
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
daemonsetAnnotations: {}
## @param netmaker.deploymentAnnotations Annotations for netmaker deployment
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
deploymentAnnotations: {}
## @param netmaker.statefulsetAnnotations Annotations for netmaker statefulset
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
statefulsetAnnotations: {}
## @param netmaker.podLabels Extra labels for netmaker pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param netmaker.podAnnotations Annotations for netmaker pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param netmaker.podAffinityPreset Pod affinity preset. Ignored if `netmaker.affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param netmaker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `netmaker.affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node netmaker.affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param netmaker.nodeAffinityPreset.type Node affinity preset type. Ignored if `netmaker.affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param netmaker.nodeAffinityPreset.key Node label key to match. Ignored if `netmaker.affinity` is set
  ##
  key: ""
  ## @param netmaker.nodeAffinityPreset.values Node label values to match. Ignored if `netmaker.affinity` is set
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param netmaker.affinity Affinity for netmaker pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: `netmaker.podAffinityPreset`, `netmaker.podAntiAffinityPreset`, and `netmaker.nodeAffinityPreset` will be ignored when it's set
##
affinity: {}
## @param netmaker.nodeSelector Node labels for netmaker pods assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}
## @param netmaker.tolerations Tolerations for netmaker pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## ONLY FOR DEPLOYMENTS:
## @param netmaker.updateStrategy.type netmaker deployment strategy type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## ONLY FOR STATEFULSETS:
## @param netmaker.updateStrategy.type netmaker statefulset strategy type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  ## ONLY FOR DEPLOYMENTS:
  ## Can be set to RollingUpdate or Recreate
  ## ONLY FOR STATEFULSETS:
  ## Can be set to RollingUpdate or OnDelete
  ##
  type: Recreate
## ONLY FOR STATEFULSETS:
## @param netmaker.podManagementPolicy Pod management policy for netmaker statefulset
## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
##
podManagementPolicy: OrderedReady
## @param netmaker.priorityClassName netmaker pods' priorityClassName
##
priorityClassName: ""
## @param netmaker.topologySpreadConstraints Topology Spread Constraints for netmaker pod assignment spread across your cluster among failure-domains
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
##
topologySpreadConstraints: []
## @param netmaker.schedulerName Name of the k8s scheduler (other than default) for netmaker pods
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param netmaker.terminationGracePeriodSeconds Seconds netmaker pods need to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
## @param netmaker.extraEnvVars Array with extra environment variables to add to netmaker containers
## e.g:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars: []
## @param netmaker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for netmaker containers
##
extraEnvVarsCM: ""
## @param netmaker.extraEnvVarsSecret Name of existing Secret containing extra env vars for netmaker containers
##
extraEnvVarsSecret: ""
## @param netmaker.initContainers Add additional init containers to the netmaker pods
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "hello world"']
##
initContainers: []
