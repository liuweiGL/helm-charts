global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

image:
  registry: docker.io
  repository: ltbproject/self-service-password
  tag: 1.5
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

configuration: |
  # true: log and display any errors or warnings (use this in configuration/testing)
  # false: log only errors and do not display them (use this in production)
  $debug = false;

  # LDAP
  $ldap_url = "ldap://localhost";
  $ldap_starttls = false;
  $ldap_binddn = "cn=manager,dc=example,dc=com";
  $ldap_bindpw = 'secret';
  // for GSSAPI authentication, comment out ldap_bind* and uncomment ldap_krb5ccname lines
  //$ldap_krb5ccname = "/path/to/krb5cc";
  $ldap_base = "dc=example,dc=com";
  $ldap_login_attribute = "uid";
  $ldap_fullname_attribute = "cn";
  $ldap_filter = "(&(objectClass=person)($ldap_login_attribute={login}))";
  $ldap_use_exop_passwd = false;
  $ldap_use_ppolicy_control = false;

  # Active Directory mode
  # true: use unicodePwd as password field
  # false: LDAPv3 standard behavior
  $ad_mode = false;
  $ad_options=[];
  # Force account unlock when password is changed
  $ad_options['force_unlock'] = false;
  # Force user change password at next login
  $ad_options['force_pwd_change'] = false;
  # Allow user with expired password to change password
  $ad_options['change_expired_password'] = false;

  # Samba mode
  # true: update sambaNTpassword and sambaPwdLastSet attributes too
  # false: just update the password
  $samba_mode = false;
  $samba_options=[];
  # Set password min/max age in Samba attributes
  #$samba_options['min_age'] = 5;
  #$samba_options['max_age'] = 45;
  #$samba_options['expire_days'] = 90;

  # Shadow options - require shadowAccount objectClass
  $shadow_options=[];
  # Update shadowLastChange
  $shadow_options['update_shadowLastChange'] = false;
  $shadow_options['update_shadowExpire'] = false;

  # Default to -1, never expire
  $shadow_options['shadow_expire_days'] = -1;

  # Hash mechanism for password:
  # SSHA, SSHA256, SSHA384, SSHA512
  # SHA, SHA256, SHA384, SHA512
  # SMD5
  # MD5
  # CRYPT
  # ARGON2
  # clear (the default)
  # auto (will check the hash of current password)
  # This option is not used with ad_mode = true
  $hash = "clear";
  $hash_options=[];

  # Prefix to use for salt with CRYPT
  $hash_options['crypt_salt_prefix'] = "$6$";
  $hash_options['crypt_salt_length'] = "6";

  # USE rate-limiting by IP and/or by user

  $use_ratelimit = false;
  # dir for json db's (system default tmpdir)
  #$ratelimit_dbdir = '/tmp';
  # block attempts for same login ?
  $max_attempts_per_user = 2;
  # block attempts for same IP ?
  $max_attempts_per_ip = 2;
  # how many time to refuse subsequent requests ?
  $max_attempts_block_seconds = "60";
  # Header to use for client IP (HTTP_X_FORWARDED_FOR ?)
  $client_ip_header = 'REMOTE_ADDR';
  # JSON file to filter by IP
  #$ratelimit_filter_by_ip_jsonfile = "/usr/share/self-service-password/conf/rrl_filter_by_ip.json";

  # Local password policy
  # This is applied before directory password policy
  # Minimal length
  $pwd_min_length = 0;
  # Maximal length
  $pwd_max_length = 0;
  # Minimal lower characters
  $pwd_min_lower = 0;
  # Minimal upper characters
  $pwd_min_upper = 0;
  # Minimal digit characters
  $pwd_min_digit = 0;
  # Minimal special characters
  $pwd_min_special = 0;
  # Definition of special characters
  $pwd_special_chars = "^a-zA-Z0-9";
  # Forbidden characters
  #$pwd_forbidden_chars = "@%";
  # Don't reuse the same password as currently
  $pwd_no_reuse = true;
  # Check that password is different than login
  $pwd_diff_login = true;
  # Check new passwords differs from old one - minimum characters count
  $pwd_diff_last_min_chars = 0;
  # Forbidden words which must not appear in the password
  $pwd_forbidden_words = array();
  # Forbidden ldap fields
  # Respective values of the user's entry must not appear in the password
  # example: $pwd_forbidden_ldap_fields = array('cn', 'givenName', 'sn', 'mail');
  $pwd_forbidden_ldap_fields = array();
  # Complexity: number of different class of character required
  $pwd_complexity = 0;
  # use pwnedpasswords api v2 to securely check if the password has been on a leak
  $use_pwnedpasswords = false;
  # Show policy constraints message:
  # always
  # never
  # onerror
  $pwd_show_policy = "never";
  # Position of password policy constraints message:
  # above - the form
  # below - the form
  $pwd_show_policy_pos = "above";

  # disallow use of the only special character as defined in `$pwd_special_chars` at the beginning and end
  $pwd_no_special_at_ends = false;

  # Who changes the password?
  # Also applicable for question/answer save
  # user: the user itself
  # manager: the above binddn
  $who_change_password = "user";

  # Show extended error message returned by LDAP directory when password is refused
  $show_extended_error = false;

  ## Standard change
  # Use standard change form?
  $use_change = true;

  ## SSH Key Change
  # Allow changing of sshPublicKey?
  $change_sshkey = false;

  # What attribute should be changed by the changesshkey action?
  $change_sshkey_attribute = "sshPublicKey";

  # What objectClass is required for that attribute?
  $change_sshkey_objectClass = "ldapPublicKey";

  # Ensure the SSH Key submitted uses a type we trust
  $ssh_valid_key_types = array('ssh-rsa', 'ssh-dss', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', 'ecdsa-sha2-nistp521', 'ssh-ed25519');

  # Who changes the sshPublicKey attribute?
  # Also applicable for question/answer save
  # user: the user itself
  # manager: the above binddn
  $who_change_sshkey = "user";

  # Notify users anytime their sshPublicKey is changed
  ## Requires mail configuration below
  $notify_on_sshkey_change = false;

  ## Questions/answers
  # Use questions/answers?
  $use_questions = true;
  # Allow to register more than one answer?
  $multiple_answers = false;
  # Store many answers in a single string attribute
  # (only used if $multiple_answers = true)
  $multiple_answers_one_str = false;

  # Answer attribute should be hidden to users!
  $answer_objectClass = "extensibleObject";
  $answer_attribute = "info";

  # Crypt answers inside the directory
  $crypt_answers = true;

  # Extra questions (built-in questions are in lang/$lang.inc.php)
  # Should the built-in questions be included?
  $questions_use_default = true;
  #$messages['questions']['ice'] = "What is your favorite ice cream flavor?";

  # How many questions must be answered.
  #  If = 1: legacy behavior
  #  If > 1:
  #    this many questions will be included in the page forms
  #    this many questions must be set at a time
  #    user must answer this many correctly to reset a password
  #    $multiple_answers must be true
  #    at least this many possible questions must be available (there are only 2 questions built-in)
  $questions_count = 1;

  # Should the user be able to select registered question(s) by entering only the login?
  $question_populate_enable = false;

  ## Token
  # Use tokens?
  # true (default)
  # false
  $use_tokens = true;
  # Crypt tokens?
  # true (default)
  # false
  $crypt_tokens = true;
  # Token lifetime in seconds
  $token_lifetime = "3600";

  ## Mail
  # LDAP mail attribute
  $mail_attributes = array( "mail", "gosaMailAlternateAddress", "proxyAddresses" );
  # Get mail address directly from LDAP (only first mail entry)
  # and hide mail input field
  # default = false
  $mail_address_use_ldap = false;
  # Who the email should come from
  $mail_from = "admin@example.com";
  $mail_from_name = "Self Service Password";
  $mail_signature = "";
  # Notify users anytime their password is changed
  $notify_on_change = false;
  # PHPMailer configuration (see https://github.com/PHPMailer/PHPMailer)
  $mail_sendmailpath = '/usr/sbin/sendmail';
  $mail_protocol = 'smtp';
  $mail_smtp_debug = 0;
  $mail_debug_format = 'error_log';
  $mail_smtp_host = 'localhost';
  $mail_smtp_auth = false;
  $mail_smtp_user = '';
  $mail_smtp_pass = '';
  $mail_smtp_port = 25;
  $mail_smtp_timeout = 30;
  $mail_smtp_keepalive = false;
  $mail_smtp_secure = 'tls';
  $mail_smtp_autotls = true;
  $mail_smtp_options = array();
  $mail_contenttype = 'text/plain';
  $mail_wordwrap = 0;
  $mail_charset = 'utf-8';
  $mail_priority = 3;

  ## SMS
  # Use sms
  $use_sms = true;
  # SMS method (mail, api)
  $sms_method = "mail";
  $sms_api_lib = "lib/smsapi.inc.php";
  # GSM number attribute
  $sms_attributes = array( "mobile", "pager", "ipPhone", "homephone" );
  # Partially hide number
  $sms_partially_hide_number = true;
  # Send SMS mail to address. {sms_attribute} will be replaced by real sms number
  $smsmailto = "{sms_attribute}@service.provider.com";
  # Subject when sending email to SMTP to SMS provider
  $smsmail_subject = "Provider code";
  # Message
  $sms_message = "{smsresetmessage} {smstoken}";
  # Remove non digit characters from GSM number
  $sms_sanitize_number = false;
  # Truncate GSM number
  $sms_truncate_number = false;
  $sms_truncate_number_length = 10;
  # SMS token length
  $sms_token_length = 6;
  # Max attempts allowed for SMS token
  $max_attempts = 3;

  # Encryption, decryption keyphrase, required if $use_tokens = true and $crypt_tokens = true, or $use_sms, or $crypt_answer
  # Please change it to anything long, random and complicated, you do not have to remember it
  # Changing it will also invalidate all previous tokens and SMS codes
  $keyphrase = "secret";

  # Reset URL (if behind a reverse proxy)
  #$reset_url = $_SERVER['HTTP_X_FORWARDED_PROTO'] . "://" . $_SERVER['HTTP_X_FORWARDED_HOST'] . $_SERVER['SCRIPT_NAME'];

  # Display help messages
  $show_help = true;

  # Default language
  $lang = "en";

  # List of authorized languages. If empty, all language are allowed.
  # If not empty and the user's browser language setting is not in that list, language from $lang will be used.
  $allowed_lang = array();

  # Display menu on top
  $show_menu = true;

  # Logo
  $logo = "images/ltb-logo.png";

  # Background image
  $background_image = "images/unsplash-space.jpeg";

  # Path is relative to htdocs/html and the custom CSS file should be created in css/ directory. For example: "css/sample.css"
  $custom_css = "";
  $display_footer = true;

  # Where to log password resets - Make sure apache has write permission
  # By default, they are logged in Apache log
  #$reset_request_log = "/var/log/self-service-password";

  # Invalid characters in login
  # Set at least "*()&|" to prevent LDAP injection
  # If empty, only alphanumeric characters are accepted
  $login_forbidden_chars = "*()&|";

  ## Captcha
  $use_captcha = false;

  ## Default action
  # change
  # sendtoken
  # sendsms
  $default_action = "change";

  ## Rest API
  $use_restapi = false;

  ## Extra messages
  # They can also be defined in lang/ files
  #$messages['passwordchangedextramessage'] = NULL;
  #$messages['changehelpextramessage'] = NULL;

  ## Pre Hook
  # Launch a prehook script before changing password.
  # Script should return with 0, to allow password change.
  # Any other exit code would abort password modification
  #$prehook = "/usr/share/self-service-password/prehook.sh";
  # Display prehook error
  #$display_prehook_error = true;
  # Encode passwords sent to prehook script as base64. This will prevent alteration of the passwords if set to true.
  # To read the actual password in the prehook script, use a base64_decode function/tool
  #$prehook_password_encodebase64 = false;
  # Ignore prehook error. This will allow to change password even if prehook script fails.
  #$ignore_prehook_error = true;

  ## Post Hook
  # Launch a posthook script after successful password change
  #$posthook = "/usr/share/self-service-password/posthook.sh";
  # Display posthook error
  #$display_posthook_error = true;
  # Encode passwords sent to posthook script as base64. This will prevent alteration of the passwords if set to true.
  # To read the actual password in the posthook script, use a base64_decode function/tool
  #$posthook_password_encodebase64 = false;

  # Force setlocale if your default PHP configuration is not correct
  #setlocale(LC_CTYPE, "en_US.UTF-8");

  # Hide some messages to not disclose sensitive information
  # These messages will be replaced by badcredentials error
  # by default mailnomatch is obscured since it can disclose account existence
  $obscure_failure_messages = array("mailnomatch");
  $obscure_usernotfound_sendtoken = true;

  # HTTP Header name that may hold a login to preset in forms
  #$header_name_preset_login="Auth-User";

  # The name of an HTTP Header that may hold a reference to an extra config file to include.
  #$header_name_extra_config="SSP-Extra-Config";

  # Cache directory
  #$smarty_compile_dir = "/var/cache/self-service-password/templates_c";
  #$smarty_cache_dir = "/var/cache/self-service-password/cache";

  # Smarty debug mode - will popup debug information on web interface
  $smarty_debug = false;

## Chart name
##
nameOverride: ""
## 默认包含 helm install 时指定的 release name
##
fullnameOverride: ""
## @param commonAnnotations Common annotations to add to all MySQL resources (sub-charts are not considered). Evaluated as a template
##
commonAnnotations: {}
## @param commonLabels Common labels to add to all MySQL resources (sub-charts are not considered). Evaluated as a template
##
commonLabels: {}

replicaCount: 1
## @param self-service-password.command Override default container command on RocketMQ self-service-password container(s) (useful when using custom images)
##
command: []
## @param self-service-password.args Override default container args on RocketMQ self-service-password container(s) (useful when using custom images)
##
args: []
## @param self-service-password.automountServiceAccountToken Mount Service Account token in pod
##
automountServiceAccountToken: false
## @param self-service-password.hostAliases Deployment pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param self-service-password.containerPorts.mysql Container port for mysql
##
containerPorts:
  ssp: 80
## @param self-service-password.updateStrategy.type Update strategy type for the RocketMQ self-service-password Deployment
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  type: Recreate
## @param self-service-password.podAnnotations Additional pod annotations for RocketMQ self-service-password pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param self-service-password.podAffinityPreset RocketMQ self-service-password pod affinity preset. Ignored if `self-service-password.affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param self-service-password.podAntiAffinityPreset RocketMQ self-service-password pod anti-affinity preset. Ignored if `self-service-password.affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## RocketMQ self-service-password node affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param self-service-password.nodeAffinityPreset.type RocketMQ self-service-password node affinity preset type. Ignored if `self-service-password.affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param self-service-password.nodeAffinityPreset.key RocketMQ self-service-password node label key to match Ignored if `self-service-password.affinity` is set.
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## @param self-service-password.nodeAffinityPreset.values RocketMQ self-service-password node label values to match. Ignored if `self-service-password.affinity` is set.
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param self-service-password.affinity Affinity for RocketMQ self-service-password pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}
## @param self-service-password.nodeSelector Node labels for RocketMQ self-service-password pods assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
##
nodeSelector: {}
## @param self-service-password.tolerations Tolerations for RocketMQ self-service-password pods assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param self-service-password.priorityClassName RocketMQ self-service-password pods' priorityClassName
##
priorityClassName: ""
## @param self-service-password.runtimeClassName RocketMQ self-service-password pods' runtimeClassName
##
runtimeClassName: ""
## @param self-service-password.schedulerName Name of the k8s scheduler (other than default)
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param self-service-password.terminationGracePeriodSeconds In seconds, time the given to the RocketMQ self-service-password pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
## @param self-service-password.topologySpreadConstraints Topology Spread Constraints for pod assignment
## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
## The value is evaluated as a template
##
topologySpreadConstraints: []
## RocketMQ self-service-password Pod security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param self-service-password.podSecurityContext.enabled Enable security context for RocketMQ self-service-password pods
## @param self-service-password.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
## @param self-service-password.podSecurityContext.sysctls Set kernel settings using the sysctl interface
## @param self-service-password.podSecurityContext.supplementalGroups Set filesystem extra groups
## @param self-service-password.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
##
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
## RocketMQ self-service-password container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param self-service-password.containerSecurityContext.enabled RocketMQ self-service-password container securityContext
## @param self-service-password.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
## @param self-service-password.containerSecurityContext.runAsUser User ID for the RocketMQ self-service-password container
## @param self-service-password.containerSecurityContext.runAsGroup Group ID for the RocketMQ self-service-password container
## @param self-service-password.containerSecurityContext.runAsNonRoot Set RocketMQ self-service-password container's Security Context runAsNonRoot
## @param self-service-password.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
## @param self-service-password.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
## @param self-service-password.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
## @param self-service-password.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
##
containerSecurityContext:
  enabled: false
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
  readOnlyRootFilesystem: true
## RocketMQ self-service-password container's resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param self-service-password.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if self-service-password.resources is set (self-service-password.resources is recommended for production).
## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
##
resourcesPreset: "nano"
## @param self-service-password.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi
##
resources: {}
## Configure extra options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 3600
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  ## Configure extra options for readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param primary.readinessProbe.enabled Enable readinessProbe
## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## Configure extra options for startupProbe probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param startupProbe.enabled Enable startupProbe
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 60
## @param customLivenessProbe Override default liveness probe
##
customLivenessProbe: {}
## @param customStartupProbe Override default startup probe
##
customStartupProbe: {}
## @param lifecycleHooks for the Nacos container(s) to automate configuration before or after startup
##
lifecycleHooks: {}
## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
##
extraVolumes: []
## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
##
extraVolumeMounts: []
## @param initContainers Add additional init containers to the Nacos pods
## e.g:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
## @param self-service-password.extraEnvVars Extra environment variables to be set on RocketMQ self-service-password containers
## E.g.
## extraEnvVars:
##  - name: TZ
##    value: "Europe/Paris"
##
extraEnvVars: []
## @param self-service-password.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for RocketMQ self-service-password containers
##
extraEnvVarsCM: ""
## @param self-service-password.extraEnvVarsSecret Name of existing Secret containing extra env vars for RocketMQ self-service-password containers
##
extraEnvVarsSecret: ""
## @param self-service-password.extraPodSpec Optionally specify extra PodSpec for the RocketMQ self-service-password pod(s)
##
extraPodSpec: {}
## @param self-service-password.extraPorts Extra ports to expose
##
extraPorts: []
## @param self-service-password.initContainers Add additional init containers for the RocketMQ self-service-password pod(s)
##
initContainers: []
## @param self-service-password.sidecars Add additional sidecar containers for the RocketMQ self-service-password pod(s)
##
sidecars: []
## @param self-service-password.podLabels RocketMQ self-service-password pod label. If labels are same as commonLabels , this will take precedence
##
podLabels: {}
## RocketMQ self-service-password Service parameters
##
service:
  ## @param self-service-password.service.type RocketMQ self-service-password K8s service type
  ##
  type: ClusterIP
  ## @param self-service-password.service.ports.self-service-password RocketMQ self-service-password K8s service port
  ##
  ports:
    ssp: 80
  ## @param self-service-password.service.nodePorts.self-service-password RocketMQ self-service-password K8s service node port
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    ssp: ""
  ## @param self-service-password.service.clusterIP RocketMQ self-service-password K8s service clusterIP IP
  ## e.g:
  ## clusterIP: None
  ##
  clusterIP: ""
  ## @param self-service-password.service.loadBalancerIP RocketMQ self-service-password loadBalancerIP if service type is `LoadBalancer`
  ## Set the LoadBalancer service type to internal only
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  loadBalancerIP: ""
  ## @param self-service-password.service.externalTrafficPolicy Enable client source IP preservation
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param self-service-password.service.loadBalancerSourceRanges Addresses that are allowed when RocketMQ self-service-password service is LoadBalancer
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## E.g.
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param self-service-password.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
  ##
  extraPorts: []
  ## @param self-service-password.service.annotations Additional custom annotations for RocketMQ self-service-password service
  ##
  annotations: {}
  ## @param self-service-password.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  ## If "ClientIP", consecutive client requests will be directed to the same Pod
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  ##
  sessionAffinity: None
  ## @param self-service-password.service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  ##
  sessionAffinityConfig: {}

## Configure the ingress resource that allows you to access the
## Nginx installation. Set up the URL
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Set to true to enable ingress record generation
  ##
  enabled: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.hostname Default host for the ingress resource
  ##
  hostname: self-service-password.local
  ## @param ingress.path The Path to Nginx. You may need to set this to '/*' in order to use this with ALB ingress controllers.
  ##
  path: /
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    cert-manager.io/cluster-issuer: zerossl-http
  ## @param ingress.ingressClassName Set the ingerssClassName on the ingress record for k8s 1.18+
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: "nginx"
  ## @param ingress.tls Create TLS Secret
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: false
  ## @param ingress.tlsWwwPrefix Adds www subdomain to default cert
  ## Creates tls host with ingress.hostname: {{ print "www.%s" .Values.ingress.hostname }}
  ## Is enabled if "nginx.ingress.kubernetes.io/from-to-www-redirect" is "true"
  tlsWwwPrefix: false
  ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: nginx.local
  ##   path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - nginx.local
  ##   secretName: nginx.local-tls
  ##
  extraTls: []
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## - name: nginx.local-tls
  ##   key:
  ##   certificate:
  ##
  secrets: []
  ## @param ingress.extraRules The list of additional rules to be added to this ingress record. Evaluated as a template
  ## Useful when looking for additional customization, such as using different backend
  ##
  extraRules: []
