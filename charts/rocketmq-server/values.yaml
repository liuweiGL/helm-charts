global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

image:
  registry: docker.io
  repository: apache/rocketmq
  tag: latest
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

## Chart name
nameOverride: ""
## 默认包含 helm install 时指定的 release name
fullnameOverride: ""
## @param commonAnnotations Common annotations to add to all RocketMQ resources (sub-charts are not considered). Evaluated as a template
##
commonAnnotations: {}
## @param commonLabels Common labels to add to all RocketMQ resources (sub-charts are not considered). Evaluated as a template
##
commonLabels: {}

namesrv:
  name: "namesrv"
  replicaCount: 1
  ## @param namesrv.command Override default container command on RocketMQ namesrv container(s) (useful when using custom images)
  ##
  command: []
  ## @param namesrv.args Override default container args on RocketMQ namesrv container(s) (useful when using custom images)
  ##
  args: []
  ## @param namesrv.automountServiceAccountToken Mount Service Account token in pod
  ##
  automountServiceAccountToken: false
  ## @param namesrv.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param namesrv.configuration [string] Configure RocketMQ namesrv with a custom namesrv.conf file
  ## ref: https://github.com/apache/rocketmq/blob/develop/common/src/main/java/org/apache/rocketmq/common/namesrv/NamesrvConfig.java
  ##
  #configuration: |-

  ## @param namesrv.existingConfigMap Name of existing ConfigMap with RocketMQ namesrv configuration.
  ## NOTE: When it's set the 'configuration' parameter is ignored
  ##
  existingConfigMap: ""
  ## @param namesrv.containerPorts.mysql Container port for mysql
  ##
  containerPorts:
    namesrv: 9876
  ## @param namesrv.updateStrategy.type Update strategy type for the RocketMQ namesrv Deployment
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    type: Recreate
  ## @param namesrv.podAnnotations Additional pod annotations for RocketMQ namesrv pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param namesrv.podAffinityPreset RocketMQ namesrv pod affinity preset. Ignored if `namesrv.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param namesrv.podAntiAffinityPreset RocketMQ namesrv pod anti-affinity preset. Ignored if `namesrv.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## RocketMQ namesrv node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param namesrv.nodeAffinityPreset.type RocketMQ namesrv node affinity preset type. Ignored if `namesrv.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param namesrv.nodeAffinityPreset.key RocketMQ namesrv node label key to match Ignored if `namesrv.affinity` is set.
    ## E.g.
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param namesrv.nodeAffinityPreset.values RocketMQ namesrv node label values to match. Ignored if `namesrv.affinity` is set.
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param namesrv.affinity Affinity for RocketMQ namesrv pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param namesrv.nodeSelector Node labels for RocketMQ namesrv pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param namesrv.tolerations Tolerations for RocketMQ namesrv pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param namesrv.priorityClassName RocketMQ namesrv pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param namesrv.runtimeClassName RocketMQ namesrv pods' runtimeClassName
  ##
  runtimeClassName: ""
  ## @param namesrv.schedulerName Name of the k8s scheduler (other than default)
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param namesrv.terminationGracePeriodSeconds In seconds, time the given to the RocketMQ namesrv pod needs to terminate gracefully
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  ##
  terminationGracePeriodSeconds: ""
  ## @param namesrv.topologySpreadConstraints Topology Spread Constraints for pod assignment
  ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## The value is evaluated as a template
  ##
  topologySpreadConstraints: []
  ## RocketMQ namesrv Pod security context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param namesrv.podSecurityContext.enabled Enable security context for RocketMQ namesrv pods
  ## @param namesrv.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param namesrv.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param namesrv.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param namesrv.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## RocketMQ namesrv container security context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param namesrv.containerSecurityContext.enabled RocketMQ namesrv container securityContext
  ## @param namesrv.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param namesrv.containerSecurityContext.runAsUser User ID for the RocketMQ namesrv container
  ## @param namesrv.containerSecurityContext.runAsGroup Group ID for the RocketMQ namesrv container
  ## @param namesrv.containerSecurityContext.runAsNonRoot Set RocketMQ namesrv container's Security Context runAsNonRoot
  ## @param namesrv.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
  ## @param namesrv.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
  ## @param namesrv.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
  ## @param namesrv.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
  ##
  containerSecurityContext:
    enabled: false
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
    readOnlyRootFilesystem: true
  ## RocketMQ namesrv container's resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  ## @param namesrv.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if namesrv.resources is set (namesrv.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "small"
  ## @param namesrv.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for liveness probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param primary.livenessProbe.enabled Enable livenessProbe
  ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  ## Configure extra options for readiness probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param primary.readinessProbe.enabled Enable readinessProbe
  ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  ## Configure extra options for startupProbe probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param primary.startupProbe.enabled Enable startupProbe
  ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 10
    successThreshold: 1
  ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
  ##
  customLivenessProbe: {}
  ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
  ##
  customReadinessProbe: {}
  ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
  ##
  customStartupProbe: {}
  ## @param namesrv.extraEnvVars Extra environment variables to be set on RocketMQ namesrv containers
  ## E.g.
  ## extraEnvVars:
  ##  - name: TZ
  ##    value: "Europe/Paris"
  ##
  extraEnvVars: []
  ## @param namesrv.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for RocketMQ namesrv containers
  ##
  extraEnvVarsCM: ""
  ## @param namesrv.extraEnvVarsSecret Name of existing Secret containing extra env vars for RocketMQ namesrv containers
  ##
  extraEnvVarsSecret: ""
  ## @param namesrv.extraPodSpec Optionally specify extra PodSpec for the RocketMQ namesrv pod(s)
  ##
  extraPodSpec: {}
  ## @param namesrv.extraPorts Extra ports to expose
  ##
  extraPorts: []
  ## @param namesrv.initContainers Add additional init containers for the RocketMQ namesrv pod(s)
  ##
  initContainers: []
  ## @param namesrv.sidecars Add additional sidecar containers for the RocketMQ namesrv pod(s)
  ##
  sidecars: []
  ## @param namesrv.podLabels RocketMQ namesrv pod label. If labels are same as commonLabels , this will take precedence
  ##
  podLabels: {}
  ## RocketMQ namesrv Service parameters
  ##
  service:
    ## @param namesrv.service.type RocketMQ namesrv K8s service type
    ##
    type: ClusterIP
    ## @param namesrv.service.ports.namesrv RocketMQ namesrv K8s service port
    ##
    ports:
      namesrv: 9876
    ## @param namesrv.service.nodePorts.namesrv RocketMQ namesrv K8s service node port
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      namesrv: ""
    ## @param namesrv.service.clusterIP RocketMQ namesrv K8s service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param namesrv.service.loadBalancerIP RocketMQ namesrv loadBalancerIP if service type is `LoadBalancer`
    ## Set the LoadBalancer service type to internal only
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param namesrv.service.externalTrafficPolicy Enable client source IP preservation
    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
    ## @param namesrv.service.loadBalancerSourceRanges Addresses that are allowed when RocketMQ namesrv service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## E.g.
    ## loadBalancerSourceRanges:
    ##   - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param namesrv.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
    ##
    extraPorts: []
    ## @param namesrv.service.annotations Additional custom annotations for RocketMQ namesrv service
    ##
    annotations: {}
    ## @param namesrv.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
    ## If "ClientIP", consecutive client requests will be directed to the same Pod
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    ##
    sessionAffinity: None
    ## @param namesrv.service.sessionAffinityConfig Additional settings for the sessionAffinity
    ## sessionAffinityConfig:
    ##   clientIP:
    ##     timeoutSeconds: 300
    ##
    sessionAffinityConfig: {}
    ## Headless service properties
    ##
    headless:
      ## @param namesrv.service.headless.annotations Additional custom annotations for headless RocketMQ namesrv service.
      ##
      annotations: {}

broker:
  name: "broker"
  replicaCount: 1
  ## @param broker.command Override default container command on RocketMQ broker container(s) (useful when using custom images)
  ##
  command: []
  ## @param broker.args Override default container args on RocketMQ broker container(s) (useful when using custom images)
  ##
  args: []
  ## @param broker.automountServiceAccountToken Mount Service Account token in pod
  ##
  automountServiceAccountToken: false
  ## @param broker.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []

  ## @param broker.acl Configure RocketMQ broker with a custom acl file,only support administrator
  acl:
    enabled: false
    accessKey: ""
    secretKey: ""
    whitelistIps: []
  ## @param broker.configuration [string] Configure RocketMQ broker with a custom broker.conf file
  ## ref: https://github.com/apache/rocketmq/blob/develop/common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
  ##
  storePathRootDir: "/opt/rocketmq/data"
  configuration: |-
    {{- $name := include "rocketmq.broker.fullname" . }}
    {{- $aclEnable := .Values.broker.acl.enabled -}}
    {{- $storePathRootDir := .Values.broker.storePathRootDir -}}
    {{- $replicaCount := .Values.broker.replicaCount | int }}
    {{- range $index := until $replicaCount }}
    {{- $brokerName := printf "%s-%d" $name $index }}
    {{ $brokerName -}}.conf: |
      brokerName={{ $brokerName }}
      storePathRootDir={{ $storePathRootDir }}
      aclEnable={{ $aclEnable }}
      brokerClusterName=DefaultCluster
      traceOn=true
      autoCreateTopicEnable=false
      autoCreateSubscriptionGroup=true
      enableIncrementalTopicCreation=true
      flushDiskType=ASYNC_FLUSH
      enablePropertyFilter=true
    {{- end }}

  ## @param broker.existingConfigMap Name of existing ConfigMap with RocketMQ broker configuration.
  ## NOTE: When it's set the 'configuration' parameter is ignored
  ##
  existingConfigMap: ""
  ## @param broker.containerPorts.mysql Container port for mysql
  ##
  containerPorts:
    broker: 10911
  ## @param broker.updateStrategy.type Update strategy type for the RocketMQ broker Deployment
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    type: RollingUpdate

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  ##
  persistence:
    ## @param broker.persistence.enabled Enable persistence on RocketMQ broker replicas using a `PersistentVolumeClaim`. If false, use emptyDir
    ##
    enabled: true
    ## @param broker.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for RocketMQ broker replicas
    ## NOTE: When it's set the rest of persistence parameters are ignored
    ##
    existingClaim: ""
    ## @param broker.persistence.subPath The name of a volume's sub path to mount for persistence
    ##
    subPath: ""
    ## @param broker.persistence.storageClass RocketMQ broker persistent volume storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""
    ## @param broker.persistence.annotations RocketMQ broker persistent volume claim annotations
    ##
    annotations: {}
    ## @param broker.persistence.accessModes RocketMQ broker persistent volume access Modes
    ##
    accessModes:
    - ReadWriteOnce
    ## @param broker.persistence.size RocketMQ broker persistent volume size
    ##
    size: 4Gi
    ## @param broker.persistence.selector Selector to match an existing Persistent Volume
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}
  ## broker Persistent Volume Claim Retention Policy
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  ##
  persistentVolumeClaimRetentionPolicy:
    ## @param broker.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for broker StatefulSet
    ##
    enabled: false
    ## @param broker.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ##
    whenScaled: Retain
    ## @param broker.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    whenDeleted: Retain

  ## @param broker.podAnnotations Additional pod annotations for RocketMQ broker pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param broker.podAffinityPreset RocketMQ broker pod affinity preset. Ignored if `broker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param broker.podAntiAffinityPreset RocketMQ broker pod anti-affinity preset. Ignored if `broker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## RocketMQ broker node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param broker.nodeAffinityPreset.type RocketMQ broker node affinity preset type. Ignored if `broker.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param broker.nodeAffinityPreset.key RocketMQ broker node label key to match Ignored if `broker.affinity` is set.
    ## E.g.
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param broker.nodeAffinityPreset.values RocketMQ broker node label values to match. Ignored if `broker.affinity` is set.
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param broker.affinity Affinity for RocketMQ broker pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param broker.nodeSelector Node labels for RocketMQ broker pods assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param broker.tolerations Tolerations for RocketMQ broker pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param broker.priorityClassName RocketMQ broker pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param broker.runtimeClassName RocketMQ broker pods' runtimeClassName
  ##
  runtimeClassName: ""
  ## @param broker.schedulerName Name of the k8s scheduler (other than default)
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param broker.terminationGracePeriodSeconds In seconds, time the given to the RocketMQ broker pod needs to terminate gracefully
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  ##
  terminationGracePeriodSeconds: ""
  ## @param broker.topologySpreadConstraints Topology Spread Constraints for pod assignment
  ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## The value is evaluated as a template
  ##
  topologySpreadConstraints: []
  ## @param broker.podManagementPolicy podManagementPolicy to manage scaling operation of RocketMQ broker pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
  ##
  podManagementPolicy: ""
  ## RocketMQ broker Pod security context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param broker.podSecurityContext.enabled Enable security context for RocketMQ broker pods
  ## @param broker.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param broker.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param broker.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param broker.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## RocketMQ broker container security context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param broker.containerSecurityContext.enabled RocketMQ broker container securityContext
  ## @param broker.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param broker.containerSecurityContext.runAsUser User ID for the RocketMQ broker container
  ## @param broker.containerSecurityContext.runAsGroup Group ID for the RocketMQ broker container
  ## @param broker.containerSecurityContext.runAsNonRoot Set RocketMQ broker container's Security Context runAsNonRoot
  ## @param broker.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
  ## @param broker.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
  ## @param broker.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
  ## @param broker.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
  ##
  containerSecurityContext:
    enabled: false
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
    readOnlyRootFilesystem: true
  ## @param broker.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for liveness probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param primary.livenessProbe.enabled Enable livenessProbe
  ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  ## Configure extra options for readiness probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param primary.readinessProbe.enabled Enable readinessProbe
  ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  ## Configure extra options for startupProbe probe
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param primary.startupProbe.enabled Enable startupProbe
  ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 10
    successThreshold: 1
  ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
  ##
  customLivenessProbe: {}
  ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
  ##
  customReadinessProbe: {}
  ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
  ##
  customStartupProbe: {}
  ## @param broker.extraEnvVars Extra environment variables to be set on RocketMQ broker containers
  ## E.g.
  ## extraEnvVars:
  ##  - name: TZ
  ##    value: "Europe/Paris"
  ##
  extraEnvVars: []
  ## @param broker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for RocketMQ broker containers
  ##
  extraEnvVarsCM: ""
  ## @param broker.extraEnvVarsSecret Name of existing Secret containing extra env vars for RocketMQ broker containers
  ##
  extraEnvVarsSecret: ""
  ## @param broker.extraPodSpec Optionally specify extra PodSpec for the RocketMQ broker pod(s)
  ##
  extraPodSpec: {}
  ## @param broker.extraPorts Extra ports to expose
  ##
  extraPorts: []
  ## @param broker.initContainers Add additional init containers for the RocketMQ broker pod(s)
  ##
  initContainers: []
  ## @param broker.sidecars Add additional sidecar containers for the RocketMQ broker pod(s)
  ##
  sidecars: []
  ## @param broker.podLabels RocketMQ broker pod label. If labels are same as commonLabels , this will take precedence
  ##
  podLabels: {}
  ## RocketMQ broker Service parameters
  ##
  service:
    ## @param broker.service.ports.broker RocketMQ broker K8s serviimagePullSecretsce port
    ##
    ports:
      broker: 10911
    ## Headless service properties
    ##
    headless:
      ## @param namesrv.service.headless.annotations Additional custom annotations for headless RocketMQ namesrv service.
      ##
      annotations: {}

